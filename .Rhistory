names = c("DIA2", "HT2"))
blogdown:::serve_site()
blogdown:::new_post_addin()
# Small
13.0637*metric_ton_convert
metric_ton_convert <- 0.907185
# Small
13.0637*metric_ton_convert
# Medium
21.8263*metric_ton_convert
# Large
30.2494*metric_ton_convert
396/2000
(396/2000)*2000
(396*2000)/1116
(468*2000)/1116
(347*2000)/1116
(396*2000)/1211
(468*2000)/1211
(347*2000)/1211
library(tidyverse)
library(httr)
library(jsonlite)
library(rlist)
fiadb_api_POST <- function(argList){
# make request
resp <- POST(url="https://apps.fs.usda.gov/fiadb-api/fullreport", body=argList, encode="form")
# parse response from JSON to R list
respObj <- content(resp, "parsed", encoding = "ISO-8859-1")
# create empty output list
outputList <- list()
# add estimates data frame to output list
outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))
# if estimate includes totals and subtotals, add those data frames to output list
if ('subtotals' %in% names(respObj)){
subtotals <- list()
# one subtotal data frame for each grouping variable
for (i in names(respObj$subtotals)){
subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))
}
outputList[['subtotals']] <- subtotals
# totals data frame
outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))
}
# add estimate metadata
outputList[['metadata']] <- respObj$metadata
return(outputList)
}
# fiadb_api_POST() will accept a FIADB-API fullreport URL and return dataframes
# See descriptor: https://apps.fs.usda.gov/fiadb-api/
fiadb_api_POST <- function(argList){
# make request
resp <- POST(url="https://apps.fs.usda.gov/fiadb-api/fullreport", body=argList, encode="form")
# parse response from JSON to R list
respObj <- content(resp, "parsed", encoding = "ISO-8859-1")
# create empty output list
outputList <- list()
# add estimates data frame to output list
outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))
# if estimate includes totals and subtotals, add those data frames to output list
if ('subtotals' %in% names(respObj)){
subtotals <- list()
# one subtotal data frame for each grouping variable
for (i in names(respObj$subtotals)){
subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))
}
outputList[['subtotals']] <- subtotals
# totals data frame
outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))
}
# add estimate metadata
outputList[['metadata']] <- respObj$metadata
return(outputList)
}
arg_list <- list(snum = 55,
sdenom = 2,
wc = 232021,
rselected = 'Forest type group',
cselected = 'Stand-size class',
outputFormat = 'NJSON')
# submit list to POST request function
post_data <- fiadb_api_POST(arg_list)
# estimate data frame
all_rows <- post_data[['estimates']]
all_rows
all_rows <- tibble(all_rows) |>
filter(GRP1 = "`0002 Spruce \\/ fir group")
all_rows <- tibble(all_rows) |>
filter(GRP1 == "`0002 Spruce \\/ fir group")
all_rows
# estimate data frame
all_rows <- post_data[['estimates']]
all_rows <- tibble(all_rows)
View(all_rows)
View(all_rows)
all_rows <- tibble(all_rows) |>
filter(GRP1 == "`0002 Spruce \/ fir group")
all_rows
# estimate data frame
all_rows <- post_data[['estimates']]
all_rows <- tibble(all_rows) |>
filter(GRP1 == "`0002 Spruce \/ fir group")
all_rows
all_rows <- tibble(all_rows) |>
filter(GRP1 == "`0002 Spruce \\/ fir group")
all_rows
large_sd <- large_se*sqrt(plots_large)
30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.4388641
large_sd <- large_se*sqrt(plots_large)
large_sd
# Small
13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.6287748
small_sd <- small_se*sqrt(small_large)
small_sd
# Small
13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.6287748
small_sd <- small_se*sqrt(plots_small)
small_sd
# Medium
21.8263*metric_ton_convert
plots_medium = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
med_sd
plots_med = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
med_sd
# Large
30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.4388641
large_sd <- large_se*sqrt(plots_large)
large_sd
small_sd
med_sd
large_sd
all_rows
# estimate data frame
all_rows <- post_data[['estimates']]
all_rows
View(all_rows)
metric_ton_convert <- 0.907185
# Small
13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.4388641
small_sd <- small_se*sqrt(plots_small)
small_sd
# Medium
21.8263*metric_ton_convert
plots_med = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
med_sd
# Large
30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.6287748
large_sd <- large_se*sqrt(plots_large)
large_sd
small_sd
med_sd
large_sd
small_sd
med_sd
large_sd
# Small
13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.4388641
small_sd <- small_se*sqrt(plots_small)
small_sd
# Medium
21.8263*metric_ton_convert
plots_med = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
med_sd
# Large
30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.6287748
large_sd <- large_se*sqrt(plots_large)
large_sd
small_sd
med_sd
large_sd
stratum <- tribble(
~`Stand size class`, ~`Stratum area`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter", 655, 8.7, 5699,
"Medium diameter", 770, 8.3, 6391,
"Large diameter", 575, 11.7, 6728,
"SUM", 2000, NA, 18818
)
# Chunk 1
library(tidyverse)
library(kable)
library(tidyverse)
library(kableExtra)
knitr::kable((stratum[,]),
caption = 'Example stratum for a forest carbon inventory.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
stratum <- tribble(
~`Stand size class`, ~`Stratum area`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 655, 8.7, 5699,
"Medium diameter (5 - 10 in)", 770, 8.3, 6391,
"Large diameter (> 10 in)", 575, 11.7, 6728,
"SUM", 2000, NA, 18818
)
knitr::kable((stratum[,]),
caption = 'Example stratum for a forest carbon inventory.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
library(forestsamplr)
devtools::install_github("SilviaTerra/forest_sampling")
# devtools::install_github("SilviaTerra/forest_sampling")
library(forestsamplr)
small_se <- 0.4388641
small_sd <- small_se*sqrt(plots_small)
small_sd
small_se <- 0.4
small_sd <- small_se*sqrt(plots_small)
small_sd
small_se <- 0.39
small_sd <- small_se*sqrt(plots_small)
small_sd
plots_all <- 1116
all_se <- 1.544
all_sd <- all_se*sqrt(plots_all)
all_sd
# Chunk 1
library(tidyverse)
library(kableExtra)
# Chunk 2
# fiadb_api_POST() will accept a FIADB-API fullreport URL and return dataframes
# See descriptor: https://apps.fs.usda.gov/fiadb-api/
fiadb_api_POST <- function(argList){
# make request
resp <- POST(url="https://apps.fs.usda.gov/fiadb-api/fullreport", body=argList, encode="form")
# parse response from JSON to R list
respObj <- content(resp, "parsed", encoding = "ISO-8859-1")
# create empty output list
outputList <- list()
# add estimates data frame to output list
outputList[['estimates']] <- as.data.frame(do.call(rbind,respObj$estimates))
# if estimate includes totals and subtotals, add those data frames to output list
if ('subtotals' %in% names(respObj)){
subtotals <- list()
# one subtotal data frame for each grouping variable
for (i in names(respObj$subtotals)){
subtotals[[i]] <- as.data.frame(do.call(rbind,respObj$subtotals[[i]]))
}
outputList[['subtotals']] <- subtotals
# totals data frame
outputList[['totals']] <- as.data.frame(do.call(rbind,respObj$totals))
}
# add estimate metadata
outputList[['metadata']] <- respObj$metadata
return(outputList)
}
# Chunk 3
arg_list <- list(snum = 55,
sdenom = 2,
wc = 232021,
rselected = 'Forest type group',
cselected = 'Stand-size class',
outputFormat = 'NJSON')
# submit list to POST request function
post_data <- fiadb_api_POST(arg_list)
# estimate data frame
all_rows <- post_data[['estimates']]
all_rows
# list of subtotal data frames
subtotals <- post_data[['subtotals']]
subtotals
plots_all <- 1116
all_se <- 1.07
all_sd <- all_se*sqrt(plots_all)
all_sd
all_rows
plots_all <- 1116
all_se <- 0.32
all_sd <- all_se*sqrt(plots_all)
all_sd
stratum <- tribble(
~`Stand size class`, ~`Stratum area`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 65, 7.8, 507,
"Medium diameter (5 - 10 in)", 77, 8.3, 639,
"Large diameter (> 10 in)", 58, 11.7, 679,
"SUM", 200, NA, 1825
)
knitr::kable((stratum[,]),
caption = 'Example stratum for a forest carbon inventory.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
stratum
return(num.plots)}
n_proportional < -allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
allocate <- function(acres.stratum, total.acres, total.plots){
num.plots = round((acres.stratum / total.acres) * total.plots)
return(num.plots)
}
n_proportional <- allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
stratum$`Stratum area (acres)`
metric_ton_convert <- 0.907185
plots_all <- 1116
all_se <- 0.32
all_sd <- all_se*sqrt(plots_all)
all_sd
# Small
13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.39
small_sd <- small_se*sqrt(plots_small)
small_sd
# Medium
21.8263*metric_ton_convert
plots_med = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
med_sd
# Large
30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.6287748
large_sd <- large_se*sqrt(plots_large)
large_sd
stratum <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 65, 7.8, 507,
"Medium diameter (5 - 10 in)", 77, 8.3, 639,
"Large diameter (> 10 in)", 58, 11.7, 679,
"SUM", 200, NA, 1825
)
allocate <- function(acres.stratum, total.acres, total.plots){
num.plots = round((acres.stratum / total.acres) * total.plots)
return(num.plots)
}
n_proportional <- allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
stratum <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 65, 7.8, 507,
"Medium diameter (5 - 10 in)", 77, 8.3, 639,
"Large diameter (> 10 in)", 58, 11.7, 679#,
#"SUM", 200, NA, 1825
)
s
allocate <- function(acres.stratum, total.acres, total.plots){
num.plots = round((acres.stratum / total.acres) * total.plots)
return(num.plots)
}
allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
allocate(acres.stratum = stratum$`Area x SD`,
total.acres = sum(stratum$`Area x SD`),
total.plots = 100)
stratum_summ <- tribble(
~`Stand size class`, ~`Plots to measure - proportional`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 32, 28,
"Medium diameter (5 - 10 in)", 38, 35,
"Large diameter (> 10 in)", 29, 37,
"SUM", 100, 100
)
stratum_summ <- tribble(
~`Stand size class`, ~`Plots to measure - proportional`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 32, 28,
"Medium diameter (5 - 10 in)", 38, 35,
"Large diameter (> 10 in)", 29, 37,
"SUM", 100, 100
)
knitr::kable((stratum_summ[,]),
caption = 'Distribution of plots to sample for proportional and optimal allocation methods.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::kable((stratum[,]),
caption = 'Example stratum for a forest carbon inventory in spruce/fir forests in Maine.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
View(carb)
library(tidyverse)
library(kableExtra)
#See here for general statistics used in this analysis (adapted slightly): https://apps.fs.usda.gov/fiadb-api/fullreport?rselected=Forest%20type%20group&cselected=Stand-size%20class&sdenom=2&snum=55&wc=232021
metric_ton_convert <- 0.907185
plots_all <- 1116
all_se <- 0.32
all_sd <- all_se*sqrt(plots_all)
# Small
#13.0637*metric_ton_convert
plots_small = 396
small_se <- 0.39
small_sd <- small_se*sqrt(plots_small)
# Medium
#21.8263*metric_ton_convert
plots_med = 468
med_se <- 0.3850253
med_sd <- med_se*sqrt(plots_med)
# Large
#30.2494*metric_ton_convert
plots_large = 347
large_se <- 0.6287748
large_sd <- large_se*sqrt(plots_large)
stratum <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 65, 7.8, 507,
"Medium diameter (5 - 10 in)", 77, 8.3, 639,
"Large diameter (> 10 in)", 58, 11.7, 679
)
knitr::kable((stratum[,]),
caption = 'Example stratum for a forest carbon inventory in spruce/fir forests in Maine.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
allocate <- function(acres.stratum, total.acres, total.plots){
num.plots = round((acres.stratum / total.acres) * total.plots)
return(num.plots)
}
allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
allocate(acres.stratum = stratum$`Area x SD`,
total.acres = sum(stratum$`Area x SD`),
total.plots = 100)
stratum_summ <- tribble(
~`Stand size class`, ~`Plots to measure - proportional`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 32, 28,
"Medium diameter (5 - 10 in)", 38, 35,
"Large diameter (> 10 in)", 29, 37,
"SUM", 100, 100
)
knitr::kable((stratum_summ[,]),
caption = 'Distribution of plots to sample for proportional and optimal allocation methods.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
stratum_summ <- tribble(
~`Stand size class`, ~`Plots to measure - \nproportional method`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 32, 28,
"Medium diameter (5 - 10 in)", 38, 35,
"Large diameter (> 10 in)", 29, 37,
"SUM", 100, 100
)
stratum_summ <- tribble(
~`Stand size class`, ~`Plots to measure - \nproportional method`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 32, 28,
"Medium diameter (5 - 10 in)", 38, 35,
"Large diameter (> 10 in)", 29, 37,
"SUM", 100, 100
)
knitr::kable((stratum_summ[,]),
caption = 'Distribution of plots to sample for proportional and optimal allocation methods.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
stratum <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`, ~`Plots to measure - proportional`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 65, 7.8, 507, 32, 38,
"Medium diameter (5 - 10 in)", 77, 8.3, 639, 38, 35,
"Large diameter (> 10 in)", 58, 11.7, 679, 29, 37,
"SUM", 200, NA, 1825, 100, 100
)
knitr::kable((stratum_summ[,]),
caption = 'Distribution of plots to sample for proportional and optimal allocation methods.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
stratum_summ <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`, ~`Plots to measure - proportional`, ~`Plots to measure - optimal`,
"Small diameter (< 5 in)", 65, 7.8, 507, 32, 38,
"Medium diameter (5 - 10 in)", 77, 8.3, 639, 38, 35,
"Large diameter (> 10 in)", 58, 11.7, 679, 29, 37,
"SUM", 200, NA, 1825, 100, 100
)
knitr::kable((stratum_summ[,]),
caption = 'Distribution of plots to sample for proportional and optimal allocation methods.') %>%
kable_styling(bootstrap_options = "bordered",
full_width = FALSE)
allocate <- function(acres.stratum, total.acres, total.plots){
num.plots = ceiling((acres.stratum / total.acres) * total.plots)
return(num.plots)
}
allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
stratum <- tribble(
~`Stand size class`, ~`Stratum area (acres)`, ~`SD (metric tons/acre)`, ~`Area x SD`,
"Small diameter (< 5 in)", 65, 7.8, 507,
"Medium diameter (5 - 10 in)", 77, 8.3, 639,
"Large diameter (> 10 in)", 58, 11.7, 679
)
allocate(acres.stratum = stratum$`Stratum area (acres)`,
total.acres = sum(stratum$`Stratum area (acres)`),
total.plots = 100)
allocate(acres.stratum = stratum$`Area x SD`,
total.acres = sum(stratum$`Area x SD`),
total.plots = 100)
