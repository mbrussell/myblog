specify(response = cps) %>%
hypothesize(null = "point", mu = 18) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
Chirps_null_dist
Chirps_null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
Chirps_null_dist <- chirps %>%
specify(response = cps) %>%
hypothesize(null = "point", mu = 18) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
Chirps_null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
Chirps_null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
chirps_null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
chirps_null_dist <- chirps %>%
specify(response = cps) %>%
hypothesize(null = "point", mu = 18) %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "mean")
chirps_null_dist %>%
visualize() +
shade_p_value(observed_statistic,
direction = "two-sided")
observed_test_stat <- chirps %>%
specify(response = cps) %>%
calculate(stat = "mean")
chirps_null_dist %>%
visualize() +
shade_p_value(observed_test_stat,
direction = "two-sided")
t_test(chirps, response = cps, mu = 18)
ggplot(chirps, aes(x = cps)) +
geom_histogram()
ggplot(chirps, aes(x = cps)) +
geom_bar()
ggplot(chirps, aes(x = cps)) +
geom_histogram(bins = 4)
ggplot(chirps, aes(x = cps)) +
geom_histogram(bins = 10)
ggplot(chirps, aes(x = cps)) +
geom_histogram(bins = 20)
ggplot(chirps, aes(x = cps)) +
geom_histogram(bins = 15)
ggplot(chirps, aes(x = cps)) +
geom_boxplot()
ggplot(chirps, aes(x = cps)) +
geom_boxplot() +
labs(x = "Chirps per second")
ggplot(chirps, aes(cps)) +
geom_boxplot() +
labs(x = "Chirps per second")
iron <- iron %>%
mutate(depth.fact = as.factor(depth))
iron.aov <- lm(iron ~ depth.fact, data = iron)
anova(iron.aov)
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
observed_f_stat
iron_null_dist <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "bootstrap") %>%
calculate(stat = "F")
iron_null_dist
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
observed_f_stat
iron_null_dist %>%
visualize() +
shade_p_value(observed_f_statistic,
direction = "greater")
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
observed_f_stat
iron_null_dist %>%
visualize() +
shade_p_value(observed_f_stat,
direction = "greater")
iron_null_dist <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
observed_f_stat
iron_null_dist %>%
visualize() +
shade_p_value(observed_f_stat,
direction = "greater")
ggplot(iron, aes(factor(depth), iron)) +
geom_boxplot()+
ylab("Iron content (mg/L)") +
xlab("Water depth (feet)")
iron.aov <- lm(iron ~ depth.fact, data = iron)
anova(iron.aov)
iron_null_dist <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
generate(reps = 1000, type = "permute") %>%
calculate(stat = "F")
iron_null_dist
p_value <- iron_null_dist %>%
get_p_value(obs_stat = observed_f_stat,
direction = "greater")
p_value
iron_null_dist <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
generate(reps = 200, type = "permute") %>%
calculate(stat = "F")
p_value <- iron_null_dist %>%
get_p_value(obs_stat = observed_f_stat,
direction = "greater")
p_value
?get_p_value
iron_null_dist %>%
get_p_value(obs_stat = observed_f_stat,
direction = "greater")
observed_f_stat
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
observed_f_stat
iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
iron_null_dist %>%
visualize() +
shade_p_value(observed_f_stat,
direction = "greater")
visualize(iron_null_dist) +
shade_p_value(observed_f_statistic,
direction = "greater")
visualize(iron_null_dist) +
shade_p_value(observed_f_stat,
direction = "greater")
blogdown:::serve_site()
observed_f_stat <- iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
iron_null_dist %>%
get_p_value(obs_stat = observed_f_stat,
direction = "greater")
iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
iron %>%
specify(iron ~ depth.fact) %>%
hypothesize(null = "independence") %>%
calculate(stat = "F")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(tidyverse)
carb <- read_csv("C://Users//matt//Documents//Arbor//Data//CARB carbon price.csv")
carb <- carb %>%
mutate(Date2 = as.Date(Date, "%m/%d/%Y")) %>%
drop_na(Date2)
min <- as.Date("2017-10-01")
max <- as.Date("2022-12-31")
ggplot(carb, aes(Date2, Price, col = Auction))+
scale_color_manual(values=c("darkgreen", "brown"))+
geom_point(size = 2) +
geom_line() +
scale_x_date(date_labels = "%m-%Y", date_breaks  ="3 month") +
labs(x = "Date", y = "Price ($USD)",
title = "California ARB carbon price allowances, 2018-2022 ",
subtitle = "Price per metric tonne of carbon",
caption = "Source: California ARB Auction Notices and Reports")+
theme(panel.background = element_rect(fill = "NA"),
axis.line = element_line(color="black"),
axis.ticks = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
legend.title = element_blank(),
legend.key = element_rect(colour = "transparent"))
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
# Chunk 1
library(tidyverse)
# Chunk 2
stumpage <- read_csv("C://Users//matt//Documents//Arbor//Projects//Seven Islands//me_stumpage.csv")
# Chunk 3
stumpage_all <- stumpage %>%
filter(County == "*Statewide*")
p.stumpage <- ggplot(stumpage_all, aes(x = reorder(Species, Avg), y = Avg, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
scale_fill_brewer(palette="GnBu") +
#facet_wrap(~County, ncol=2) +
coord_flip() +
labs(x = "Species",
y = "Sawlog price ($USD per MBF)",
caption = "Source: Maine Forest Service, 2020 stumpage price report") +
theme(panel.background = element_rect(fill = "NA"),
axis.text.x = element_text(angle = 0, hjust = 0),
legend.title = element_blank())
p.stumpage
stumpage_all <- stumpage %>%
filter(County == "*Statewide*")
p.stumpage <- ggplot(stumpage_all, aes(x = reorder(Species, Avg), y = Avg, fill = factor(Year))) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
scale_fill_brewer(palette="GnBu") +
#facet_wrap(~County, ncol=2) +
coord_flip() +
labs(x = " ",
y = "Sawlog price ($USD per MBF)",
caption = "Source: Maine Forest Service, 2020 stumpage price report") +
theme(panel.background = element_rect(fill = "NA"),
axis.text.x = element_text(angle = 0, hjust = 0),
legend.title = element_blank())
p.stumpage
stumpage_all_2020 <- stumpage %>%
filter(Year == 2020)
p.stumpage.range <- ggplot(stumpage_all_2020, aes(x = Species, y = Avg)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Min, ymax = Max), width = 0.25) +
facet_wrap(~County, ncol=4) +
coord_flip() +
scale_fill_brewer(palette="GnBu") +
labs(x = "Species",
y = "Sawlog price ($USD per MBF)",
subtitle = "Mean sawtimber price +/- min max value reported",
caption = "Source: Maine Forest Service, 2020 stumpage price report") +
theme(panel.background = element_rect(fill = "NA"),
axis.text.x = element_text(angle = 45, hjust = 1))
p.stumpage.range
blogdown:::serve_site()
p.stumpage.range <- ggplot(stumpage_all_2020, aes(x = Species, y = Avg)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Min, ymax = Max), width = 0.25) +
facet_wrap(~County, ncol=4) +
coord_flip() +
scale_fill_brewer(palette="GnBu") +
labs(x = "Species",
y = "Sawlog price ($USD per MBF)",
subtitle = "Mean sawtimber price +/- min max value reported",
caption = "Source: Maine Forest Service, 2020 stumpage price report") +
theme(panel.background = element_rect(fill = "NA"),
axis.text.y = element_text(size = 6))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
# Load packages
library(tidyverse)
library(knitr)
library(kableExtra)
# Enter data, from Zhang 2021 page 163
timber <- tribble(
~Year, ~`10-year Treasury`, ~`S&P 500`, ~`NCREIF Index`, ~REIT,
2010, 3.30, 12.78, -0.15, 13.42,
2011, 1.89, 0.00, 1.57, 9.30,
2012, 1.78, 13.41, 7.75, 38.50,
2013, 3.04, 29.60, 9.69, 9.45,
2014, 2.17, 11.39, 10.48, 9.59,
2015, 2.27, -0.73, 4.97, -6.07,
2016, 2.44, 9.54, 2.59, 8.62,
2017, 2.41, 19.42, 3.63, 21.08,
2018, 2.69, -6.24, 3.21, -32.50,
2019, 1.92, 28.88, 1.30, 40.00,
2020, 0.93, 16.26, 0.81, 12.44,
2021, 1.52, 26.89, 9.17, NA,
2022, 3.88, -19.44, 12.9, NA
)
timber_long <- timber %>%
select(-REIT) %>%
pivot_longer(`10-year Treasury`:`NCREIF Index`, "Index", "PctChange")
ggplot(timber_long, aes(Year, value, col = Index)) +
geom_point() +
geom_line() +
labs(y = "Annual rate of return (%)") +
scale_x_continuous(breaks = c(2010:2022)) +
theme_bw()
timber_long_summ <- timber_long %>%
group_by(Index) %>%
summarize(`Avg return` = round(mean(value), 1),
`Std Dev return` = round(sd(value), 1)) %>%
mutate(`CV return` = round((`Std Dev return`/`Avg return`)*100, 1))
timber_long_summ %>%
kbl(caption = "Average and variability of annual rates of return of timberland investments, 2010-2021.") %>%
kable_styling()
=sd(  c(26.89,16.26,28.88,-6.24,19.42,9.54,-0.73))/mean(  c(26.89,16.26,28.88,-6.24,19.42,9.54,-0.73))
sd(  c(26.89,16.26,28.88,-6.24,19.42,9.54,-0.73))/mean(  c(26.89,16.26,28.88,-6.24,19.42,9.54,-0.73))
blogdown:::serve_site()
# Chunk 1
library(tidyverse)
library(usmap)
library(rFIA)
# Chunk 2
# Set working directory
my_wd <- setwd("C:/Users/matt/Documents/Arbor/Projects/FFCP/Central Apps/Data")
# Get TREE, PLOT, and COND tables
# Only run this to get data into local directory for the first time
# capps <- getFIA(states = c("PA", "WV", "MD", "OH"),
#                     tables = c("PLOT", "COND", "TREE", "POP_PLOT_STRATUM_ASSGN", "POP_ESTN_UNIT",
#                                "POP_EVAL", "POP_STRATUM", "POP_EVAL_TYP", "POP_EVAL_GRP"),
#                    dir = my_wd)
# FIA reference tables
# Loaded these manually
# After data are loaded, run this:
# Filter functions will obtain only the counties we're interested in for the Central Apps region.
capps <- readFIA(my_wd)
capps <- readFIA(my_wd)
my_wd <- setwd("C:/Users/matt/Documents/Arbor/Projects/FFCP/Central Apps/Data")
capps <- readFIA(my_wd)
fips <- read_csv('C://Users//matt//Documents//Arbor//Projects//FFCP//Data//fips.csv')
fips <- fips %>%
mutate(state_fips = as.numeric(str_sub(FIPS, 1, 2)),
cty_fips = as.numeric(str_sub(FIPS, 3, 5)))
fips
PLOT_221_MD_OH <- capps$PLOT %>%
mutate(ECO_PROV = str_sub(ECOSUBCD, end = -3)) %>%
filter(STATECD %in% c(24, 39) & ECO_PROV %in% c("221", "M221")) %>%
group_by(STATECD, COUNTYCD) %>%
summarize(num_plots = n())
PLOT_221_MD_OH
PLOT_PA_WV <- capps$PLOT %>%
mutate(ECO_PROV = str_sub(ECOSUBCD, end = -3)) %>%
filter(STATECD %in% c(42, 54)) %>%
group_by(STATECD, COUNTYCD) %>%
summarize(num_plots = n())
PLOT_PA_WV
PLOT_capps <- rbind(PLOT_PA_WV, PLOT_221_MD_OH)
fips_pa_wv <- fips %>%
filter(State == "PA" | State == "WV") %>%
mutate(fips = FIPS,
eligible = "1")
md_counties <- c(1, 23, 43, 21, 13)
fips_md <- fips %>%
filter(State == "MD") %>%
mutate(fips = FIPS,
eligible = ifelse(cty_fips %in% md_counties, "1", "0"))
oh_counties <-  PLOT_capps %>%
filter(STATECD == 39) %>%
pull(COUNTYCD)
fips_oh <- fips %>%
filter(State == "OH") %>%
mutate(fips = FIPS,
eligible = ifelse(cty_fips %in% oh_counties, "1", "0"))
fips_capps <- rbind(fips_pa_wv, fips_md, fips_oh)
capps$PLOT <- capps$PLOT %>%
filter(STATECD == 24 & COUNTYCD %in% md_counties |
STATECD == 39 & COUNTYCD %in% oh_counties |
STATECD %in% c(42, 54))
capps$COND <- capps$COND %>%
filter(STATECD == 24 & COUNTYCD %in% md_counties |
STATECD == 39 & COUNTYCD %in% oh_counties |
STATECD %in% c(42, 54))
capps$TREE<- capps$TREE %>%
filter(STATECD == 24 & COUNTYCD %in% md_counties |
STATECD == 39 & COUNTYCD %in% oh_counties |
STATECD %in% c(42, 54))
plotFIA(capps)
p.ca <- plot_usmap(include = c("Pennsylvania", "West Virginia", "Maryland", "Ohio"),
regions = "states",
data = fips_capps,
values = "eligible",
color = "black") +
labs(title = "Eligible counties for FFCP: Central Appalachians") +
theme(panel.background = element_rect(colour = "black")) +
scale_fill_manual(values = c("0" = "white", "1" = "blue"), name = "eligible") +
theme(legend.position = "none")
p.ca
cond_new <-  capps$COND %>%
group_by(STATECD, UNITCD, COUNTYCD, PLOT, INVYR, CONDID) %>%
summarize(num_cond = n())
cond_new_id <- cond_new %>%
group_by(STATECD, UNITCD, COUNTYCD, PLOT, INVYR) %>%
summarize(num_condid = n())
# Percent of multi-condition plots in the region:
cond_new_id_summ <- cond_new_id %>%
mutate(num_conds = ifelse(num_condid == 1, "Single condition", "Multiple condition")) %>%
group_by(num_conds) %>%
summarize(num_conds_num = n()) %>%
mutate(Pct = num_conds_num / sum(num_conds_num) * 100)
cond_new_id_summ
cond_new <- inner_join(capps$COND, cond_new_id, by = c("STATECD", "UNITCD", "COUNTYCD", "PLOT", "INVYR")) %>%
filter(num_condid == 1)
stand <- full_join(cond_new, capps$PLOT, by = c("STATECD", "UNITCD", "COUNTYCD", "PLOT", "INVYR")) %>%
select(!c(CN.x, CYCLE.x, SUBCYCLE.x, CN.y, CYCLE.y, SUBCYCLE.y)) %>%
filter(PLOT_STATUS_CD == 1) %>%
filter(COND_STATUS_CD == 1)
names(stand)
trt <- tribble(
~TRTCD, ~TRTCD_NAME,
0, "None",
10, "Cutting",
20, "Site preparation",
30, "Artificial regeneration",
40, "Natural regeneration",
50, "Other silviculture",
)
# Annual inventory year start dates
ann_start <- tribble(
~STATECD, ~STATENAME, ~INVYR_BEGIN,
24, "Maryland", 2004,
39, "Ohio", 2001,
42, "Pennsylvania", 2000,
54, "West Virginia", 2004
)
stand <- stand %>%
inner_join(ann_start, by = "STATECD") %>%
mutate(TRTCD_NAME1 = ifelse(TRTCD1 == 0, "None",
ifelse(TRTCD1 == 10, "Cutting",
ifelse(TRTCD1 == 20, "Site preparation",
ifelse(TRTCD1 == 30, "Artificial regeneration",
ifelse(TRTCD1 == 40, "Natural regeneration", "Other silviculture"))))),
TRTCD_NAME2 = ifelse(TRTCD2 == 0, "None",
ifelse(TRTCD2 == 10, "Cutting",
ifelse(TRTCD2 == 20, "Site preparation",
ifelse(TRTCD2 == 30, "Artificial regeneration",
ifelse(TRTCD2 == 40, "Natural regeneration", "Other silviculture"))))),
TRTCD_NAME3 = ifelse(TRTCD3 == 0, "None",
ifelse(TRTCD3 == 10, "Cutting",
ifelse(TRTCD3 == 20, "Site preparation",
ifelse(TRTCD3 == 30, "Artificial regeneration",
ifelse(TRTCD3 == 40, "Natural regeneration", "Other silviculture"))))),
CUTTING = ifelse(TRTCD_NAME1 == "Cutting" | TRTCD_NAME2 == "Cutting" | TRTCD_NAME3 == "Cutting", "YES", "NO"),
DIST = ifelse(DSTRBCD1 > 0, "YES", "NO"),
LONG_RDDISTCD = ifelse(RDDISTCD >= 7, "YES", "NO"),
SOME_WATERCD = ifelse(WATERCD >= 1, "SOME", "NONE"),
ECO_PROV = str_sub(ECOSUBCD, end = -3)) %>%
filter(INVYR >= INVYR_BEGIN)
tree <- capps$TREE
tree <- inner_join(tree, stand, by = c("STATECD", "UNITCD", "COUNTYCD", "PLOT", "INVYR"))
ref_spp <- read_csv('C:/Users/matt/Documents/Arbor/Projects/FFCP/Central Apps/Data/REF_SPECIES.csv') %>%
select(SPCD, WOOD_SPGR_MC12VOL_DRYWT)
tree <- inner_join(tree, ref_spp, by = "SPCD")
View(tree)
tree <- tree %>%
filter(STATUSCD == 1) %>%
mutate(tpa_part = TPA_UNADJ,
ba_part = (0.00545415*DIA^2)*TPA_UNADJ,
VOLCFNET_part = VOLCFNET*TPA_UNADJ,
CARBON_AG_part = CARBON_AG*TPA_UNADJ,
RD_part = ifelse(DIA >= 5.0, ((0.00015+(0.00218*WOOD_SPGR_MC12VOL_DRYWT))*(DIA*2.54/10)**1.6)*2.4701, 0),
LOREY_HT_PART = ba_part*ACTUAL_HT,
remtpa_part = TPAREMV_UNADJ,
REMVCFGS_part = REMVCFGS*TPAREMV_UNADJ,
REMVCFAL_part = REMVCFAL*TPAREMV_UNADJ,
FREMVCFGS_part = FREMVCFGS*TPAREMV_UNADJ,
FREMVCFAL_part = FREMVCFAL*TPAREMV_UNADJ)
tree <- tree %>%
filter(STATUSCD == 1) %>%
mutate(tpa_part = TPA_UNADJ,
ba_part = (0.00545415*DIA^2)*TPA_UNADJ,
VOLCFNET_part = VOLCFNET*TPA_UNADJ,
CARBON_AG_part = CARBON_AG*TPA_UNADJ,
RD_part = ifelse(DIA >= 5.0, ((0.00015+(0.00218*WOOD_SPGR_MC12VOL_DRYWT))*(DIA*2.54/10)**1.6)*2.4701, 0),
LOREY_HT_PART = ba_part*ACTUAL_HT,
remtpa_part = TPAREMV_UNADJ,
REMVCFGS_part = REMVCFGS*TPAREMV_UNADJ,
REMVCFAL_part = REMVCFAL*TPAREMV_UNADJ,
FREMVCFGS_part = FREMVCFGS*TPAREMV_UNADJ,
FREMVCFAL_part = FREMVCFAL*TPAREMV_UNADJ)
View(tree)
tree <- tree %>%
filter(STATUSCD == 1) %>%
mutate(tpa_part = TPA_UNADJ,
ba_part = (0.00545415*DIA^2)*TPA_UNADJ,
VOLCFNET_part = VOLCFNET*TPA_UNADJ,
CARBON_AG_part = CARBON_AG*TPA_UNADJ,
RD_part = ifelse(DIA >= 5.0, ((0.00015+(0.00218*WOOD_SPGR_MC12VOL_DRYWT))*(DIA*2.54/10)**1.6)*2.4701, 0),
LOREY_HT_PART = ba_part*ACTUALHT,
remtpa_part = TPAREMV_UNADJ,
REMVCFGS_part = REMVCFGS*TPAREMV_UNADJ,
REMVCFAL_part = REMVCFAL*TPAREMV_UNADJ,
FREMVCFGS_part = FREMVCFGS*TPAREMV_UNADJ,
FREMVCFAL_part = FREMVCFAL*TPAREMV_UNADJ)
tree_sum <- tree %>%
group_by(STATECD, UNITCD, COUNTYCD, PLOT, INVYR) %>%
summarize(TPA = sum(tpa_part),
BA = sum(ba_part),
RD = sum(RD_part),
mean_HT = mean(ACTUALHT),
LOREY_HT = LOREY_HT_PART / BA,
VOLCFNET = sum(VOLCFNET_part),
CARBON_AG = sum(CARBON_AG_part)) %>%
mutate(QMD = sqrt((BA/TPA)/(0.00545415))) %>%
mutate_at(vars(TPA, BA, RD, VOLCFNET, CARBON_AG, QMD), replace_na, 0)
summary(tree_sum$mean_HT)
summary(tree_sum$LORE_HT)
summary(tree_sum$LOREY_HT)
